#version 420 compatibility

in layout(location=0) vec3 position;
in layout(location=1) vec2 uv;
in layout(location=2) vec4 color;
in layout(location=3) vec3 norm;
in layout(location=4) vec4 tang;

layout (binding = 3) uniform sampler2D bumpMap;

uniform mat4 ProjectionMatrix;
uniform mat4 ShadowMatrix;
uniform mat3 CameraMatrix;

out vec3 Position;
out vec4 ShadowCoord;

uniform float Displace;
//uniform bool Displace_x;

layout (binding = 0) uniform Light
{
    vec3 Position;
    vec3 Ambient;
}
light;

out Data
{
    vec2 texpos;
    vec4 Color;
    vec3 Ambient;
    vec3 lightPos;
    vec3 normal;
    float Intensity;
    vec3 lightDir;
    vec3 viewDir;
}
Out;

void main(void)
{
    vec3 normal, lightDir;
    vec3 tangent, binormal;

    float bump = (texture(bumpMap, uv).r - 0.5) * Displace;
    vec3 position_ = vec3(position.x + norm.x * bump, position.y + norm.y * bump, position.z + norm.z * bump);

    //if (Displace_x) position_.x += 1;

    gl_Position = ProjectionMatrix * vec4(position_, 1);
    Position = CameraMatrix * position_;
    ShadowCoord = ShadowMatrix * vec4(position_, 1);
    Out.texpos = uv;
    Out.Color = color;
    normal = CameraMatrix * norm;

    ///
    tangent = normalize(CameraMatrix * vec3(tang));
    binormal = normalize(cross(normal, tangent)) * tang.w;

    mat3 toLocal = mat3(tangent.x, binormal.x, normal.x,
                        tangent.y, binormal.y, normal.y,
                        tangent.z, binormal.z, normal.z);

    Out.lightPos = CameraMatrix * light.Position;
    Out.lightDir = normalize(toLocal * (light.Position - Position));
    Out.viewDir = toLocal * normalize(-Position);
    ///

    lightDir = normalize(Out.lightPos);

    Out.normal = normal;
    //Out.Intensity = max(dot(normal, lightDir), 0.0);
    Out.Intensity = abs(dot(normal, lightDir));
    Out.Ambient = (1 - light.Ambient) * (1 - Out.Intensity) + light.Ambient * Out.Intensity;
}
